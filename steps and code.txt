01) Introduction to the application : use the starter code from github
=======================================================================
02) Adding a header and footer
==========================
create a new folder name structure with two file Footer.js and Header.js

src\structure\Footer.js
src\structure\Header.js

Header.js
---------
import React from 'react';
import iceCream from '../assets/img/ultimate-ice-cream.svg';   <--- webpack will take care wheere to put this image url.

const Header = () => (
  <header>
    <h1>
      <img src={iceCream} alt="" />
      Awesome Ice Cream
    </h1>
  </header>
);

export default Header;

Footer.js
---------
import React from 'react';

const Footer = () => (
  <footer>
    <span>&copy; Awesome Ice Cream Dashboard</span>
  </footer>
);

export default Footer;

App.js
------
import React from 'react';
import Footer from './structure/Footer';
import Header from './structure/Header';
import './styles/ice-cream.scss';

const App = () => {
  return (
    <>
      <Header />
      <Footer />
    </>
  );
};

export default App;

03 Displaying the menu
------------------------
src\data\iceCreamData.js
src\ice-cream\Menu.js

1) Create a new folder for api call services  with diffrent folder `data`, so our all api call will be placing one place.
2) create a smart or functional statefull component with diffrent folder `ice-cream` which will show the menu.

iceCreamData.js
-----------------
import axios from 'axios';

export const getMenu = () => {
  return axios.get('http://localhost:5000/menuData').then(response => {
    return response.data.sort((a, b) => {
      if (a.iceCream.name < b.iceCream.name) {
        return -1;
      }
      if (a.iceCream.name > b.iceCream.name) {
        return 1;
      }
      return 0;
    });
  });
};

Menu.js
--------
import React, { useState, useEffect } from 'react';
import { getMenu } from '../data/iceCreamData';
import Helmet from 'react-helmet';

const Menu = () => {
  const [menu, setMenu] = useState([]);

  useEffect(() => {
    let isMounted = true;
    getMenu().then(menuData => {
      if (isMounted) {
        setMenu(menuData);
      }
    });
    return () => {
      isMounted = false;
    };
  }, []);

  return (
    <main>
      <Helmet>
        <title>
          Rock your taste buds with one of these! | Awesome Ice Cream
        </title>
      </Helmet>

      <h2 className="main-heading">Rock your taste buds with one of these!</h2>

      {menu.length > 0 ? (
        <ul className="container">
          {menu.map(
            ({ id, iceCream, price, description, inStock, quantity }) => (
              <li key={id.toString()}>
                <section className="card">
                  <div className="image-container"></div>
                  <div className="text-container">
                    <h3>{iceCream.name}</h3>
                    <div className="content card-content">
                      <p className="price">{`$${price.toFixed(2)}`}</p>
                      <p className={`stock${inStock ? '' : ' out'}`}>
                        {inStock
                          ? `${quantity} in stock`
                          : 'Currently out of stock!'}
                      </p>
                      <p className="description">{description}</p>
                    </div>
                  </div>
                </section>
              </li>
            )
          )}
        </ul>
      ) : (
        <p>Menu is empty! The sadness :( !!</p>
      )}
    </main>
  );
};

export default Menu;



App.js
-----
import React from 'react';
import Footer from './structure/Footer';
import Header from './structure/Header';
import Menu from './ice-cream/Menu';
import './styles/ice-cream.scss';

const App = () => {
  return (
    <>
      <Header />
      <Menu />
      <Footer />
    </>
  );
};

export default App;

04 Displaying the ice cream images
====================================
Create a new component for loading icecream 
load all the ice cream from based on id folder m from public folder , react create app directly give access of the public folder so we can directly access the filefrom there

src\ice-cream\IceCreamImage.js

IceCreamImage.js
-----------------
import React from 'react';
import PropTypes from 'prop-types';

const IceCreamImage = ({ iceCreamId }) => {
  return (
    iceCreamId != null && (
      <img
        src={`/ice-cream-images/ice-cream-${iceCreamId.toString()}.svg`}
        alt=""
      />
    )
  );
};

IceCreamImage.propTypes = {
  iceCreamId: PropTypes.number.isRequired,
};

export default IceCreamImage;


Now add this component to Menu component

Menu.js
------
import React, { useState, useEffect } from 'react';
import { getMenu } from '../data/iceCreamData';
import Helmet from 'react-helmet';
import IceCreamImage from './IceCreamImage';

const Menu = () => {
  const [menu, setMenu] = useState([]);

  useEffect(() => {
    let isMounted = true;
    getMenu().then(menuData => {
      if (isMounted) {
        setMenu(menuData);
      }
    });
    return () => {
      isMounted = false;
    };
  }, []);

  return (
    <main>
      <Helmet>
        <title>
          Rock your taste buds with one of these! | Awesome Ice Cream
        </title>
      </Helmet>

      <h2 className="main-heading">Rock your taste buds with one of these!</h2>

      {menu.length > 0 ? (
        <ul className="container">
          {menu.map(
            ({ id, iceCream, price, description, inStock, quantity }) => (
              <li key={id.toString()}>
                <section className="card">
                  <div className="image-container">
                    <IceCreamImage iceCreamId={iceCream.id} />    <------- IceCreamImage component added, there
                  </div>
                  <div className="text-container">
                    <h3>{iceCream.name}</h3>
                    <div className="content card-content">
                      <p className="price">{`$${price.toFixed(2)}`}</p>
                      <p className={`stock${inStock ? '' : ' out'}`}>
                        {inStock
                          ? `${quantity} in stock`
                          : 'Currently out of stock!'}
                      </p>
                      <p className="description">{description}</p>
                    </div>
                  </div>
                </section>
              </li>
            )
          )}
        </ul>
      ) : (
        <p>Menu is empty! The sadness :( !!</p>
      )}
    </main>
  );
};

export default Menu;


05 Adding a loading message
-------------------------
1) create a new component ---> LoaderMessage.js
src\structure\LoaderMessage.js

2) update your Menu.js to use this component


LoaderMessage.js
---------------
import React, { useState, useEffect } from "react";
import PropTypes from "prop-types";

const LoaderMessage = ({ loadingMsg, isLoading }) => {
  const [showLoadingMessage, setShowLoadingMessage] = useState(false);

  useEffect(() => {
    let loadingMessageDelay;

    if (isLoading) {
      loadingMessageDelay = setTimeout(() => {
        setShowLoadingMessage(true);
      }, 400);
    }

    return () => {
      clearTimeout(loadingMessageDelay);
      setShowLoadingMessage(false);
    };
  }, [isLoading]);

  return (
    <div>
      {showLoadingMessage ? <p className="loading">{loadingMsg}</p> : null}
    </div>
  );
};

LoaderMessage.propTypes = {
  loadingMsg: PropTypes.string.isRequired,
  isLoading: PropTypes.bool,
};

export default LoaderMessage;



Menu.js
--------
import React, { useEffect, useState } from "react";
import { Helmet } from "react-helmet";
import { getMenu } from "../data/iceCreamData";
import LoaderMessage from "../structure/LoaderMessage";
import IcecreamImage from "./IceCreamImage";

const Menu = () => {
  const [menu, setMenu] = useState([]);
  const [isLoading, setIsLoading] = useState(true);  <--- added state for loader message

  useEffect(() => {
    let isMounted = true;
    getMenu().then((menudata) => {
      if (isMounted) {
        setMenu(menudata);
        setIsLoading(false);  <--- off the state,  for loader message
      }
    });

    return () => {
      isMounted = false;
    };
  }, []);

  return (
    <main>
      <Helmet>
        <title>
          Rock your taste buds with one of these | Awesome ice cream
        </title>
      </Helmet>

      <h2 className="main-heading">Rock your taste buds with one of these</h2>
      <LoaderMessage loadingMsg="Loading menu." isLoading={isLoading} />   <--- Use here loader component
      {menu.length > 0 ? (
        <ul className="container">
          {menu.map(
            ({ id, iceCream, inStock, quantity, price, description }) => {
              return (
                <li key={id.toString()}>
                  <section className="card">
                    <div className="image-container">
                      <IcecreamImage iceCreamId={id} />
                    </div>
                    <div className="text-container">
                      <h3>{iceCream.name}</h3>
                      <div className="content card-content">
                        <p className="price">{`$${price.toFixed(2)}`}</p>
                        <p className={`stock${inStock ? "" : " out"}`}>
                          {inStock
                            ? `${quantity} in stock`
                            : "currently out of stock !!!"}
                        </p>
                        <p className="description">{description}</p>
                      </div>
                    </div>
                  </section>
                </li>
              );
            }
          )}
        </ul>
      ) : (
        !isLoading && <p>Menu is Empty ! the sadness :( !!! </p>  <--- sho footer based on loder component
      )}
    </main>
  );
};

export default Menu;



For Demoing the delay we can change the two file below, and can test
-------------------------------------------------------------------
server\index.js  --> update this endpoint using setTimeout
src\data\iceCreamData.js --> update the the endpoint

index.js
---------
app.get("/api/menu", (req, res) => {
  setTimeout(() => {
    res.send(menuData); 
  }, 3000); 
  // res.send(menuData);   <-- updatethis with seTimeout
});



iceCreamData.js
-----------------
import axios from "axios";

// **************node server end point**********
const GET_MENU = `/api/menu`;
// **********json server (db.json) end point ***********
//const GET_MENU = `http://localhost:5000/menuData`;

export const getMenu = () => {
  return axios.get(`${GET_MENU}`).then((response) => {
    return response.data.sort((a, b) => {
      if (a.iceCream.name < b.iceCream.name) {
        return -1;
      }
      if (a.iceCream.name > b.iceCream.name) {
        return 1;
      }
      return 0;
    });
  });
};



06 Routing to an edit component , make routing for edit icecream
===============================================================
1) create a new component (EditIceCream.js) src\ice-cream\EditIceCream.js
2) update App.js for integrate routing for appilcation
3) update Menu.js for Link navigation using via section and heaer link.


EditIceCream.js
---------------
import React from "react";
import { Helmet } from "react-helmet";

const EditIceCream = () => {
  return (
    <main>
      <Helmet>
        <title>Update this component | Awesome Ice Cream </title>
      </Helmet>
      <h2 className="main-heading">
        Edit ice cream component Update this component
      </h2>
    </main>
  );
};

export default EditIceCream;

App.js
-------
import React from "react";
import {
  BrowserRouter as Router,
  Route,
  Redirect,
  Switch,
} from "react-router-dom";
import EditIceCream from "./ice-cream/EditIceCream";

import Menu from "./ice-cream/Menu";
import Footer from "./structure/Footer";
import Header from "./structure/Header";
import "./styles/ice-cream.css";

function App() {
  return (
    <Router>   <---- take ur application inside routing
      <Header />
      <Switch>   <---- use switch for redirection
        <Route path="/" component={Menu} exact />  <---- define route
        <Route path="/menu-items/:menuItemId" component={EditIceCream} exact /> <---- define route
        <Redirect to="/" />   <---- define route for default direction
      </Switch>   <---- update
      <Footer />
    </Router>
  );
}

export default App;

Menu.js
-------
import React, { useEffect, useState } from "react";
import { Helmet } from "react-helmet";
import { Link } from "react-router-dom";
import { getMenu } from "../data/iceCreamData";
import LoaderMessage from "../structure/LoaderMessage";
import IcecreamImage from "./IceCreamImage";
import PropTypes from "prop-types";

const Menu = ({ history }) => {   <--- use history  props given by Route
  const [menu, setMenu] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    let isMounted = true;
    getMenu().then((menudata) => {
      if (isMounted) {
        setMenu(menudata);
        setIsLoading(false);
      }
    });

    return () => {
      isMounted = false;
    };
  }, []);

  const onItemClickHandler = (to) => {   <--- add this for section
    history.push(to);
  };

  const onLinkClickHandler = (e) => {    <--- use this to stoo propagation while click on anchor
    //This is done to avoid the click handler of the <section>
    //firing and placing two browse entries in browser history
    e.stopPropagation();
  };

  return (
    <main>
      <Helmet>
        <title>
          Rock your taste buds with one of these | Awesome ice cream
        </title>
      </Helmet>

      <h2 className="main-heading">Rock your taste buds with one of these</h2>
      <LoaderMessage loadingMsg="Loading menu." isLoading={isLoading} />
      {menu.length > 0 ? (
        <ul className="container">
          {menu.map(
            ({ id, iceCream, inStock, quantity, price, description }) => {
              return (
                <li key={id.toString()}>
                  <section          <--- make link this section as well
                    className="card"
                    onClick={() =>
                      onItemClickHandler(`/menu-items/${id.toString()}`)
                    }
                  >
                    <div className="image-container">
                      <IcecreamImage iceCreamId={id} />
                    </div>
                    <div className="text-container">
                      <h3>
                        <Link   							<--- make link here 
                          to={`/menu-items/${id.toString()}`}
                          onClick={onLinkClickHandler}
                        >
                          {iceCream.name}
                        </Link>
                      </h3>
                      <div className="content card-content">
                        <p className="price">{`$${price.toFixed(2)}`}</p>
                        <p className={`stock${inStock ? "" : " out"}`}>
                          {inStock
                            ? `${quantity} in stock`
                            : "currently out of stock !!!"}
                        </p>
                        <p className="description">{description}</p>
                      </div>
                    </div>
                  </section>
                </li>
              );
            }
          )}
        </ul>
      ) : (
        !isLoading && <p>Menu is Empty ! the sadness :( !!! </p>
      )}
    </main>
  );
};

Menu.prototype = {   <--- use the props validation
  history: PropTypes.shape({
    push: PropTypes.func.isRequired,
  }),
};
export default Menu;


07 Creating the main navigation
-------------------------------
one component Header.js is updated

we can navigate web history using back forward from browser feature on top <- ->, but we want to implement same functionality in our application to go home navigation

here for navigation block , we will not use Link , because we have better component from React router dom , the name of this component is NavLink , so this work same as Link , but when rout path match this use activate class for us, so we can make some class activate in our css and this will automatically will be applied there.

if you event dont give activeClassName="active" , it bedefault apply this active class , you can give any class name instead. so when route path will be active class will be applied , and no then class will not be applied.

and it is more efficient when its come to accessibility, its add aria-current as well.

Header.js
----------
import React from "react";
import { Link, NavLink } from "react-router-dom";
import icecream from "../assets/img/ultimate-ice-cream.svg";

const Header = () => {
  return (
    <header>
      <h1>
        <img src={icecream} alt="" />
        Awesome ice cream.
      </h1>
      <nav>
        <ul>
          <NavLink to="/" activeClassName="active" exact>
            Menu
          </NavLink>

          {/* <Link to="/" exact>   ---> dont use gere , better optionwe have NavLink
            Menu{" "}
          </Link> */}
        </ul>
      </nav>
    </header>
  );
};

export default Header;

08 Fetching the menu item in the edit component
we make get request here and show in console for perticular item
===============================================
History.push v/s History.replace
-----------------------------
we use .replace instead of .push simply because we don't want the browser to record any invalid url I have visited.

we personally use .replace when redirecting from an invalid url (or non relevant, i.e. redirect to "profile" page when a logged user goes to the "/login" url), so using the browser's "back" button works properly for the end user.

History Push The user can go forward and backward in the browser and the url will change. It works like a programmatic link with no affect on current url.

Location Replace The link of the page is set to the new one, but the user can't go between the replaced.



iceCreamData.js
------------------------

import axios from "axios";

// **************node server end point**********
// const GET_MENU = `/api/menu`;
// **********json server (db.json) end point ***********
const GET_MENU = `http://localhost:5000/menuData`;

export const getMenu = () => {
  return axios.get(`${GET_MENU}`).then((response) => {
    return response.data.sort((a, b) => {
      if (a.iceCream.name < b.iceCream.name) {
        return -1;
      }
      if (a.iceCream.name > b.iceCream.name) {
        return 1;
      }
      return 0;
    });
  });
};


export const getMenuItem = (id) => {   <---- add a new call for get perticular menu item
  return axios
    .get(`${GET_MENU}/${id}`)
    .then((response) => response.data)
    .catch((err) => {
      throw err;
    });
};

EditIceCream.js
----------------------------

import React, { useState, useRef, useEffect } from "react";
import { Helmet } from "react-helmet";
import PropTypes from "prop-types";
import { getMenuItem } from "../data/iceCreamData";
import LoaderMessage from "../structure/LoaderMessage";

const EditIceCream = ({ match, history }) => {
  const [menuItem, setMenuItem] = useState({});
  const [isLoading, setIsLoading] = useState(false);
  const isMounted = useRef(true);

  useEffect(() => {
    return () => {
      isMounted.current = false;  <--- for preventing memroy leak
    };
  }, []);

  useEffect(() => {
    setIsLoading(true);
    getMenuItem(match.params.menuItemId)    <--- make the call here tp get item
      .then(({ id, price, inStock, quantity, description, iceCream }) => {
        if (isMounted.current) {
          setMenuItem({
            id,
            price: price.toFixed(2),
            inStock,
            quantity: quantity.toString(),
            description,
            iceCream,
          });
          setIsLoading(false);
        }
      })
      .catch((err) => {
        if (err.response.status === 404 && isMounted.current) {
          history.replace("/");
        }
      });
  }, [match.params.menuItemId, history]); <--- if route param change or history changes

  console.log(menuItem);

  return (
    <main>
      <Helmet>
        <title>Update this component | Awesome Ice Cream </title>
      </Helmet>
      <h2 className="main-heading">
        Edit ice cream component Update this component
      </h2>
      <LoaderMessage loadingMsg="Loading ice cream." isLoading={isLoading} /> <--- loader message
    </main>
  );
};

EditIceCream.propTypes = {   <--- add prop type
  match: PropTypes.shape({
    params: PropTypes.object.isRequired,
  }),
  history: PropTypes.shape({
    push: PropTypes.func.isRequired,
    replace: PropTypes.func.isRequired,
  }),
};

export default EditIceCream;


09 Editing the data in a form 
make complete form , controlled form , with new css file , and create a custom hooks, there
============================
First of All fix one issue in Menu.js component , we are sending wrong id from there
error --> <IcecreamImage iceCreamId={id} />
Fixed --> <IcecreamImage iceCreamId={iceCream.id} />

/*
Notes ==============>
custom hooks https://dev.to/damcosset/how-to-create-custom-hooks-in-react-44nd
---------
The best part of hooks is that if you find a bit of logic inside your component function that you think would be useful elsewhere, you can put that in another function and call it from the components that need it (just like regular JavaScript). These functions you create are called “custom hooks”.

A custom hook is a Javascript function that starts with `use` and that call can other `hooks`. Remember that components and hooks are functions, so we are really not creating any new concepts here.

Rules of Hooks
---------------
Don’t call Hooks inside loops, conditions, or nested functions. Instead, always use Hooks at the top level of your React function, before any early returns. By following this rule, you ensure that Hooks are called in the same order each time a component renders. That’s what allows React to correctly preserve the state of Hooks between multiple useState and useEffect calls. 

Only Call Hooks from React Functions
------------------------------------
A) Call Hooks from React function components.
b) Call Hooks from custom Hooks

*/

two new files will be created for for this topic
1) src\hooks\useUniqueIds.js 
2) src\styles\forms-spacer.css

a) src\styles\forms-spacer.css
------------------------------
create a new css file for some styling to input controls

input,
select,
textarea {
  margin-bottom: 1.5em;
}


B) EditIceCream.js
------------------
import React, { useState, useRef, useEffect } from "react";
import { Helmet } from "react-helmet";
import PropTypes from "prop-types";
import { getMenuItem, putMenuItem } from "../data/iceCreamData";
import LoaderMessage from "../structure/LoaderMessage";

import IceCreamImage from "./IceCreamImage";     <---1) import new thing from here
import "../styles/forms-spacer.css";
import useUniqueIds from "../hooks/useUniqueIds";

const EditIceCream = ({ match, history }) => {
  const [menuItem, setMenuItem] = useState({  <---5) make default state
    price: "0.00",
    inStock: true,
    quantity: "0",
    description: "",
    iceCream: {},
  });
  const [isLoading, setIsLoading] = useState(false);
  const isMounted = useRef(true);

  const [descriptionId, stockId, quantityId, priceId] = useUniqueIds(4); <---6) make custom hooks

  useEffect(() => {
    return () => {
      isMounted.current = false;
    };
  }, []);

  useEffect(() => {
    setIsLoading(true);
    getMenuItem(match.params.menuItemId)
      .then(({ id, price, inStock, quantity, description, iceCream }) => {
        if (isMounted.current) {   
          setMenuItem({
            id,
            price: price.toFixed(2),
            inStock,
            quantity: quantity.toString(),
            description,
            iceCream,
          });
          setIsLoading(false);
        }
      })
      .catch((err) => {
        if (err.response.status === 404 && isMounted.current) {
          history.replace("/");
        }
      });
  }, [match.params.menuItemId, history]);

  console.log(menuItem);

  const onChangeHandler = (e) => {  <---3) create the onChangeHandler
    let newMenuItemData = {
      ...menuItem,
      [e.target.name]:
        e.target.type === "checkbox" ? e.target.checked : e.target.value,
    };

    if (e.target.name === "quantity") {
      newMenuItemData.inStock = e.target.value !== "0";
    }

    if (e.target.name === "inStock" && !e.target.checked) {
      newMenuItemData.quantity = "0";
    }

    setMenuItem(newMenuItemData);
  };

  const onSubmitHandler = (e) => {   <---4) create the onSubmitHandler
    e.preventDefault();

    const { id, price, inStock, quantity, description, iceCream } = menuItem;
    const submitItem = {
      id,
      iceCream,
      price: parseFloat(price),
      inStock,
      quantity: parseInt(quantity),
      description,
    };

    putMenuItem(submitItem).then(() => {
      history.push("/", { focus: true });
    });
  };

  return (
    <main>
      <Helmet>
        <title>Update this component | Awesome Ice Cream </title>
      </Helmet>
      <h2 className="main-heading">
        Edit ice cream component Update this component
      </h2>
      <LoaderMessage loadingMsg="Loading ice cream." isLoading={isLoading} />

      {!isLoading && (
        <div className="form-frame">   <---2) create the form
          <div className="image-container">
            <IceCreamImage iceCreamId={menuItem.iceCream.id} />
          </div>
          <div className="form-container">
            <dl>
              <dt>Name :</dt>
              <dd>{menuItem.iceCream.name}</dd>
            </dl>
            <form onSubmit={onSubmitHandler}>
              <label htmlFor={descriptionId}>Description :</label>
              <textarea
                id={descriptionId}
                name="description"
                rows="3"
                onChange={onChangeHandler}
                value={menuItem.description}
              />
              <label htmlFor={stockId}>In Stock :</label>
              <div className="checkbox-wrapper">
                <input
                  id={stockId}
                  type="checkbox"
                  name="inStock"
                  onChange={onChangeHandler}
                  checked={menuItem.inStock}
                />
                <div className="checkbox-wrapper-checked" />
              </div>
              <label htmlFor={quantityId}>Quantity :</label>
              <select
                id={quantityId}
                name="quantity"
                onChange={onChangeHandler}
                value={menuItem.quantity}
              >
                <option value="0">0</option>
                <option value="10">10</option>
                <option value="20">20</option>
                <option value="30">30</option>
                <option value="40">40</option>
                <option value="50">50</option>
              </select>
              <label htmlFor={priceId}>Price :</label>
              <input
                id={priceId}
                type="number"
                step="0.01"
                name="price"
                onChange={onChangeHandler}
                value={menuItem.price}
              />
              <div className="button-container">
                <button className="ok" type="submit">
                  Save
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </main>
  );
};

EditIceCream.propTypes = {
  match: PropTypes.shape({
    params: PropTypes.object.isRequired,
  }),
  history: PropTypes.shape({
    push: PropTypes.func.isRequired,
    replace: PropTypes.func.isRequired,
  }),
};

export default EditIceCream;


C)iceCreamData.js
---------

import axios from "axios";

// **************node server end point**********
//const GET_MENU = `/api/menu`;

// **********json server (db.json) end point ***********

const GET_MENU = `http://localhost:5000/menuData`;

export const getMenu = () => {
  return axios.get(GET_MENU).then((response) => {
    return response.data.sort((a, b) => {
      if (a.iceCream.name < b.iceCream.name) {
        return -1;
      }
      if (a.iceCream.name > b.iceCream.name) {
        return 1;
      }
      return 0;
    });
  });
};

export const getMenuItem = (id) => {
  return axios
    .get(`${GET_MENU}/${id}`)
    .then((response) => response.data)
    .catch((err) => {
      throw err;
    });
};

export const putMenuItem = (menuItem) => {   <----- api call for put or edit the data
   return axios
    .put(`${GET_MENU}/${menuItem.id}`, menuItem)
    .then((response) => response.data)
    .catch((err) => {
      throw err;
    });
};



D)IceCreamImage.js   <----update code form handling null/undefinfend id if after making not required
------------------------------


import React from "react";
import PropTypes from "prop-types";

const IcecreamImage = ({ iceCreamId }) => {
  return iceCreamId ? (
    <img
      src={`/ice-cream-images/ice-cream-${iceCreamId.toString()}.svg`}
      alt=""
    />
  ) : null;
};

IcecreamImage.propTypes = {
  iceCreamId: PropTypes.number,
};

export default IcecreamImage;


E) useUniqueIds.js   <--- create a new custom hooks
------------------
import { useRef } from "react";
import uniqid from "uniqid";

const useUniqueIds = (count) => {
  const ids = useRef([...new Array(count)].map(() => uniqid()));

  return ids.current;
};

export default useUniqueIds;


10 Building a validation system
================================
1) create a utils folder for  validators.js file

src\utils\validators.js
-----------------------
write all the field validations condition here.

export const validateDescription = (description) =>
  description ? null : "You must enter a description";

export const validateQuantity = (quantity, inStock) =>
  inStock && quantity === "0"
    ? "An in stock item should have a quantity"
    : null;

export const validatePrice = (price) => {
  const regex = /^[0-9]+(\.[0-9][0-9])$/;

  if (!price || price === "0.00") {
    return "You must enter a price";
  } else if (!regex.test(price.trim())) {
    return "Please enter a valid price";
  }
  return null;
};



src\hooks\useValidation.js
---------------------------
make a new hooks (useValidation.js) for check validation so it can be used multiple places.

import { useState, useEffect } from "react";

const useValidation = (value, validatorFn, compareValue = null) => {
  const [error, setError] = useState("");

  useEffect(() => {
    setError(validatorFn(value, compareValue));
  }, [value, compareValue, validatorFn]);

  return error;
};

export default useValidation;

src\ice-cream\EditIcecream.js
------------------------------
import above hooks and all three validator function and use it.

import React, { useState, useRef, useEffect } from "react";
import { Helmet } from "react-helmet";
import PropTypes from "prop-types";
import { getMenuItem, putMenuItem } from "../data/iceCreamData";
import LoaderMessage from "../structure/LoaderMessage";

import IceCreamImage from "./IceCreamImage";           
import "../styles/forms-spacer.css";
import useUniqueIds from "../hooks/useUniqueIds";

import {                       <-------- 1) import here
  validateDescription,
  validatePrice,
  validateQuantity,
} from "../utils/validators";
import useValidation from "../hooks/useValidation";

const EditIceCream = ({ match, history }) => {
  const [menuItem, setMenuItem] = useState({
    price: "0.00",
    inStock: true,
    quantity: "0",
    description: "",
    iceCream: {},
  });
  const [isLoading, setIsLoading] = useState(false);
  const isMounted = useRef(true);

  const [descriptionId, stockId, quantityId, priceId] = useUniqueIds(4);

  const descriptionError = useValidation(      <-------- 2) use here
    menuItem.description,
    validateDescription
  );
  const quantityError = useValidation(
    menuItem.quantity,
    validateQuantity,
    menuItem.inStock
  );
  const priceError = useValidation(menuItem.price, validatePrice);

  useEffect(() => {
    return () => {
      isMounted.current = false;
    };
  }, []);

  useEffect(() => {
    setIsLoading(true);
    getMenuItem(match.params.menuItemId)
      .then(({ id, price, inStock, quantity, description, iceCream }) => {
        if (isMounted.current) {
          setMenuItem({
            id,
            price: price.toFixed(2),
            inStock,
            quantity: quantity.toString(),
            description,
            iceCream,
          });
          setIsLoading(false);
        }
      })
      .catch((err) => {
        if (err.response.status === 404 && isMounted.current) {
          history.replace("/");
        }
      });
  }, [match.params.menuItemId, history]);

  console.log(menuItem);

  const onChangeHandler = (e) => {
    let newMenuItemData = {
      ...menuItem,
      [e.target.name]:
        e.target.type === "checkbox" ? e.target.checked : e.target.value,
    };

    if (e.target.name === "quantity") {
      newMenuItemData.inStock = e.target.value !== "0";
    }

    if (e.target.name === "inStock" && !e.target.checked) {
      newMenuItemData.quantity = "0";
    }

    setMenuItem(newMenuItemData);
  };

  const onSubmitHandler = (e) => {
    e.preventDefault();

    console.log(descriptionError);
    console.log(quantityError);
    console.log(priceError);

    if (!descriptionError && !quantityError && !priceError) {       <------- 3) check in submit handler
      const { id, price, inStock, quantity, description, iceCream } = menuItem;
      const submitItem = {
        id,
        iceCream,
        price: parseFloat(price),
        inStock,
        quantity: parseInt(quantity),
        description,
      };

      putMenuItem(submitItem).then(() => {
        history.push("/");
      });
    }
  };

  return (
    <main>
      <Helmet>
        <title>Update this component | Awesome Ice Cream </title>
      </Helmet>
      <h2 className="main-heading">
        Edit ice cream component Update this component
      </h2>
      <LoaderMessage
        loadingMessage="Loading ice cream."  <--- correct this prop
        isLoading={isLoading}
      />

      {!isLoading && (
        <div className="form-frame">
          <div className="image-container">
            <IceCreamImage iceCreamId={menuItem.iceCream.id} />
          </div>
          <div className="form-container">
            <dl>
              <dt>Name :</dt>
              <dd>{menuItem.iceCream.name}</dd>
            </dl>
            <form onSubmit={onSubmitHandler}>
              <label htmlFor={descriptionId}>Description :</label>
              <textarea
                id={descriptionId}
                name="description"
                rows="3"
                onChange={onChangeHandler}
                value={menuItem.description}
              />
              <label htmlFor={stockId}>In Stock :</label>
              <div className="checkbox-wrapper">
                <input
                  id={stockId}
                  type="checkbox"
                  name="inStock"
                  onChange={onChangeHandler}
                  checked={menuItem.inStock}
                />
                <div className="checkbox-wrapper-checked" />
              </div>
              <label htmlFor={quantityId}>Quantity :</label>
              <select
                id={quantityId}
                name="quantity"
                onChange={onChangeHandler}
                value={menuItem.quantity}
              >
                <option value="0">0</option>
                <option value="10">10</option>
                <option value="20">20</option>
                <option value="30">30</option>
                <option value="40">40</option>
                <option value="50">50</option>
              </select>
              <label htmlFor={priceId}>Price :</label>
              <input
                id={priceId}
                type="number"
                step="0.01"
                name="price"
                onChange={onChangeHandler}
                value={menuItem.price}
              />
              <div className="button-container">
                <button className="ok" type="submit">
                  Save
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </main>
  );
};

EditIceCream.propTypes = {
  match: PropTypes.shape({
    params: PropTypes.object.isRequired,
  }),
  history: PropTypes.shape({
    push: PropTypes.func.isRequired,
    replace: PropTypes.func.isRequired,
  }),
};

export default EditIceCream;


11 Displaying validation messages
===================================
create a new component for ErorContainer.js .
and comment css from form-spacer and from same css from icecream.css

src\ice-cream\ErrorContainer.js
------------------------------

import React from "react";
import PropTypes from "prop-types";

const ErrorContainer = ({ children, errorText, hasSubmitted }) => (
  <div className={errorText && hasSubmitted ? "error" : null}>
    {children}
    <div className="error-wrapper">
      {errorText && hasSubmitted && <span>{errorText}</span>}
    </div>
  </div>
);

ErrorContainer.propTypes = {
  children: PropTypes.node.isRequired,
  errorText: PropTypes.string,
  hasSubmitted: PropTypes.bool.isRequired,
};

export default ErrorContainer;

EditIcecream.js
----------------------------

import React, { useState, useRef, useEffect } from "react";
import { Helmet } from "react-helmet";
import PropTypes from "prop-types";
import { getMenuItem, putMenuItem } from "../data/iceCreamData";
import LoaderMessage from "../structure/LoaderMessage";

import IceCreamImage from "./IceCreamImage";
import "../styles/forms-spacer.css";
import useUniqueIds from "../hooks/useUniqueIds";

import {
  validateDescription,
  validatePrice,
  validateQuantity,
} from "../utils/validators";
import useValidation from "../hooks/useValidation";

import ErrorContainer from "./ErrorContainer";  <--- import COmponent

const EditIceCream = ({ match, history }) => {
  const [menuItem, setMenuItem] = useState({
    price: "0.00",
    inStock: true,
    quantity: "0",
    description: "",
    iceCream: {},
  });
  const [isLoading, setIsLoading] = useState(false);
  const [hasSubmitted, setHasSubmitted] = useState(false);

  const isMounted = useRef(true);

  const [descriptionId, stockId, quantityId, priceId] = useUniqueIds(4);

  const descriptionError = useValidation(
    menuItem.description,
    validateDescription
  );
  const quantityError = useValidation(
    menuItem.quantity,
    validateQuantity,
    menuItem.inStock
  );
  const priceError = useValidation(menuItem.price, validatePrice);

  useEffect(() => {
    return () => {
      isMounted.current = false;
    };
  }, []);

  useEffect(() => {
    setIsLoading(true);
    getMenuItem(match.params.menuItemId)
      .then(({ id, price, inStock, quantity, description, iceCream }) => {
        if (isMounted.current) {
          setMenuItem({
            id,
            price: price.toFixed(2),
            inStock,
            quantity: quantity.toString(),
            description,
            iceCream,
          });
          setIsLoading(false);
        }
      })
      .catch((err) => {
        if (err.response.status === 404 && isMounted.current) {
          history.replace("/");
        }
      });
  }, [match.params.menuItemId, history]);

  console.log(menuItem);

  const onChangeHandler = (e) => {
    let newMenuItemData = {
      ...menuItem,
      [e.target.name]:
        e.target.type === "checkbox" ? e.target.checked : e.target.value,
    };

    if (e.target.name === "quantity") {
      newMenuItemData.inStock = e.target.value !== "0";
    }

    if (e.target.name === "inStock" && !e.target.checked) {
      newMenuItemData.quantity = "0";
    }

    setMenuItem(newMenuItemData);
  };

  const onSubmitHandler = (e) => {
    e.preventDefault();
    setHasSubmitted(true);         <--- do this for to check atleast submit has been clicked atleast once.
 
    console.log(descriptionError);
    console.log(quantityError);
    console.log(priceError);

    if (!descriptionError && !quantityError && !priceError) {  
      const { id, price, inStock, quantity, description, iceCream } = menuItem;
      const submitItem = {
        id,
        iceCream,
        price: parseFloat(price),
        inStock,
        quantity: parseInt(quantity),
        description,
      };

      putMenuItem(submitItem).then(() => {
        history.push("/");
      });
    }
  };

  return (
    <main>
      <Helmet>
        <title>Update this component | Awesome Ice Cream </title>
      </Helmet>
      <h2 className="main-heading">
        Edit ice cream component Update this component
      </h2>
      <LoaderMessage
        loadingMessage="Loading ice cream."
        isLoading={isLoading}
      />

      {!isLoading && (
        <div className="form-frame">
          <div className="image-container">
            <IceCreamImage iceCreamId={menuItem.iceCream.id} />
          </div>
          <div className="form-container">
            <dl>
              <dt>Name :</dt>
              <dd>{menuItem.iceCream.name}</dd>
            </dl>
            <form onSubmit={onSubmitHandler}>
              <label htmlFor={descriptionId}>Description :</label>
              <ErrorContainer                                       <--- apply all the input places
                errorText={descriptionError}
                hasSubmitted={hasSubmitted}
              >
                <textarea
                  id={descriptionId}
                  name="description"
                  rows="3"
                  onChange={onChangeHandler}
                  value={menuItem.description}
                />
              </ErrorContainer>
              <label htmlFor={stockId}>In Stock :</label>
              <div className="checkbox-wrapper">
                <input
                  id={stockId}
                  type="checkbox"
                  name="inStock"
                  onChange={onChangeHandler}
                  checked={menuItem.inStock}
                />

                <div className="checkbox-wrapper-checked" />
              </div>
              <label htmlFor={quantityId}>Quantity :</label>
              <ErrorContainer
                errorText={quantityError}
                hasSubmitted={hasSubmitted}
              >
                <select
                  id={quantityId}
                  name="quantity"
                  onChange={onChangeHandler}
                  value={menuItem.quantity}
                >
                  <option value="0">0</option>
                  <option value="10">10</option>
                  <option value="20">20</option>
                  <option value="30">30</option>
                  <option value="40">40</option>
                  <option value="50">50</option>
                </select>
              </ErrorContainer>
              <label htmlFor={priceId}>Price :</label>
              <ErrorContainer
                errorText={priceError}
                hasSubmitted={hasSubmitted}
              >
                <input
                  id={priceId}
                  type="number"
                  step="0.01"
                  name="price"
                  onChange={onChangeHandler}
                  value={menuItem.price}
                />
              </ErrorContainer>
              <div className="button-container">
                <button className="ok" type="submit">
                  Save
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </main>
  );
};

EditIceCream.propTypes = {
  match: PropTypes.shape({
    params: PropTypes.object.isRequired,
  }),
  history: PropTypes.shape({
    push: PropTypes.func.isRequired,
    replace: PropTypes.func.isRequired,
  }),
};

export default EditIceCream;


12 Deleting a menu item
=======================
src\data\iceCreamData.js
-------------------------

import axios from "axios";

// **************node server end point**********
//const GET_MENU = `/api/menu`;

// **********json server (db.json) end point ***********

const GET_MENU = `http://localhost:5000/menuData`;

export const getMenu = () => {
  return axios.get(GET_MENU).then((response) => {
    return response.data.sort((a, b) => {
      if (a.iceCream.name < b.iceCream.name) {
        return -1;
      }
      if (a.iceCream.name > b.iceCream.name) {
        return 1;
      }
      return 0;
    });
  });
};

export const getMenuItem = (id) => {
  return axios
    .get(`${GET_MENU}/${id}`)
    .then((response) => response.data)
    .catch((err) => {
      throw err;
    });
};

export const putMenuItem = (menuItem) => {
  return axios
    .put(`${GET_MENU}/${menuItem.id}`, menuItem)
    .then((response) => response.data)
    .catch((err) => {
      throw err;
    });
};
 
export const deleteMenuItem = (id) => {       <------- add item delete call 
  return axios.delete(`${GET_MENU}/${id}`).then((response) => {
    return response.data;
  });
};


EditIcecream.js
-------------------------------
import React, { useState, useRef, useEffect } from "react";
import { Helmet } from "react-helmet";
import PropTypes from "prop-types";
import { deleteMenuItem, getMenuItem, putMenuItem } from "../data/iceCreamData";
import LoaderMessage from "../structure/LoaderMessage";

import IceCreamImage from "./IceCreamImage";
import "../styles/forms-spacer.css";
import useUniqueIds from "../hooks/useUniqueIds";

import {
  validateDescription,
  validatePrice,
  validateQuantity,
} from "../utils/validators";
import useValidation from "../hooks/useValidation";

import ErrorContainer from "./ErrorContainer";

const EditIceCream = ({ match, history }) => {
  const [menuItem, setMenuItem] = useState({
    price: "0.00",
    inStock: true,
    quantity: "0",
    description: "",
    iceCream: {},
  });
  const [isLoading, setIsLoading] = useState(false);
  const [hasSubmitted, setHasSubmitted] = useState(false);

  const isMounted = useRef(true);

  const [descriptionId, stockId, quantityId, priceId] = useUniqueIds(4);

  const descriptionError = useValidation(
    menuItem.description,
    validateDescription
  );
  const quantityError = useValidation(
    menuItem.quantity,
    validateQuantity,
    menuItem.inStock
  );
  const priceError = useValidation(menuItem.price, validatePrice);

  useEffect(() => {
    return () => {
      isMounted.current = false;
    };
  }, []);

  useEffect(() => {
    setIsLoading(true);
    getMenuItem(match.params.menuItemId)
      .then(({ id, price, inStock, quantity, description, iceCream }) => {
        if (isMounted.current) {
          setMenuItem({
            id,
            price: price.toFixed(2),
            inStock,
            quantity: quantity.toString(),
            description,
            iceCream,
          });
          setIsLoading(false);
        }
      })
      .catch((err) => {
        if (err.response.status === 404 && isMounted.current) {
          history.replace("/");
        }
      });
  }, [match.params.menuItemId, history]);

  console.log(menuItem);

  const onChangeHandler = (e) => {
    let newMenuItemData = {
      ...menuItem,
      [e.target.name]:
        e.target.type === "checkbox" ? e.target.checked : e.target.value,
    };

    if (e.target.name === "quantity") {
      newMenuItemData.inStock = e.target.value !== "0";
    }

    if (e.target.name === "inStock" && !e.target.checked) {
      newMenuItemData.quantity = "0";
    }

    setMenuItem(newMenuItemData);
  };

  const onSubmitHandler = (e) => {
    e.preventDefault();
    setHasSubmitted(true);

    console.log(descriptionError);
    console.log(quantityError);
    console.log(priceError);

    if (!descriptionError && !quantityError && !priceError) {
      const { id, price, inStock, quantity, description, iceCream } = menuItem;
      const submitItem = {
        id,
        iceCream,
        price: parseFloat(price),
        inStock,
        quantity: parseInt(quantity),
        description,
      };

      putMenuItem(submitItem).then(() => {
        history.push("/");
      });
    }
  };

  const onDeleteHandler = () => {                <--------------make delete call after deleting an item
    deleteMenuItem(match.params.menuItemId).then(() => {
      history.replace("/");
    });
  };

  return (
    <main>
      <Helmet>
        <title>Update this component | Awesome Ice Cream </title>
      </Helmet>
      <h2 className="main-heading">
        Edit ice cream component Update this component
      </h2>
      <LoaderMessage
        loadingMessage="Loading ice cream."
        isLoading={isLoading}
      />

      {!isLoading && (
        <div className="form-frame">
          <div className="image-container">
            <IceCreamImage iceCreamId={menuItem.iceCream.id} />
          </div>
          <div className="form-container">
            <dl>
              <dt>Name :</dt>
              <dd>{menuItem.iceCream.name}</dd>
            </dl>
            <form onSubmit={onSubmitHandler}>
              <label htmlFor={descriptionId}>Description :</label>
              <ErrorContainer
                errorText={descriptionError}
                hasSubmitted={hasSubmitted}
              >
                <textarea
                  id={descriptionId}
                  name="description"
                  rows="3"
                  onChange={onChangeHandler}
                  value={menuItem.description}
                />
              </ErrorContainer>
              <label htmlFor={stockId}>In Stock :</label>
              <div className="checkbox-wrapper">
                <input
                  id={stockId}
                  type="checkbox"
                  name="inStock"
                  onChange={onChangeHandler}
                  checked={menuItem.inStock}
                />

                <div className="checkbox-wrapper-checked" />
              </div>
              <label htmlFor={quantityId}>Quantity :</label>
              <ErrorContainer
                errorText={quantityError}
                hasSubmitted={hasSubmitted}
              >
                <select
                  id={quantityId}
                  name="quantity"
                  onChange={onChangeHandler}
                  value={menuItem.quantity}
                >
                  <option value="0">0</option>
                  <option value="10">10</option>
                  <option value="20">20</option>
                  <option value="30">30</option>
                  <option value="40">40</option>
                  <option value="50">50</option>
                </select>
              </ErrorContainer>
              <label htmlFor={priceId}>Price :</label>
              <ErrorContainer
                errorText={priceError}
                hasSubmitted={hasSubmitted}
              >
                <input
                  id={priceId}
                  type="number"
                  step="0.01"
                  name="price"
                  onChange={onChangeHandler}
                  value={menuItem.price}
                />
              </ErrorContainer>
              <div className="button-container">
                <button className="ok" type="submit">
                  Save
                </button>
                <button   <-------------- create button for delete item
                  className="warning"
                  type="button"
                  onClick={onDeleteHandler}
                >
                  Delete
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </main>
  );
};

EditIceCream.propTypes = {
  match: PropTypes.shape({
    params: PropTypes.object.isRequired,
  }),
  history: PropTypes.shape({
    push: PropTypes.func.isRequired,
    replace: PropTypes.func.isRequired,
  }),
};

export default EditIceCream;


13 Fetching the stock ice cream list
====================================
create a new component  src\ice-cream\IceCreams.js

IceCreams.js
-------------
import React, { useEffect, useState } from "react";
import LoaderMessage from "../structure/LoaderMessage";
import { getIceCreams } from "../data/iceCreamData";
import Helmet from "react-helmet";

const IceCreams = ({}) => {
  const [isLoading, setIsLoading] = useState(true);
  const [iceCreams, setIceCreams] = useState([]);

  useEffect(() => {
    let isMounted = true;
    getIceCreams().then((iceCreams) => {
      if (isMounted) {
        setIceCreams(iceCreams);
        setIsLoading(false);
      }
    });
    return () => {
      isMounted = false;
    };
  }, []);

  console.log(iceCreams);

  return (
    <main>
      <Helmet>
        <title>
          Choose Your Awesome Ice Cream and enjoy !!! | Awesome ice cream
        </title>
      </Helmet>

      <h2 className="main-heading">
        Choose Your Awesome Ice Cream and enjoy !!!{" "}
      </h2>
      <LoaderMessage
        loadingMessage="Loading The stock List"
        isLoading={isLoading}
      />
    </main>
  );
};

export default IceCreams;


src\data\iceCreamData.js
------------------------
import axios from "axios";

// **************node server end point**********
//const GET_MENU = `/api/menu`;

// **********json server (db.json) end point ***********

const GET_MENU = `http://localhost:5000/menuData`;
const GET_ICE_CREAM = `http://localhost:5000/iceCreams`; <--- new endpoint there for ice cream

export const getMenu = () => {
  return axios.get(GET_MENU).then((response) => {
    return response.data.sort((a, b) => {
      if (a.iceCream.name < b.iceCream.name) {
        return -1;
      }
      if (a.iceCream.name > b.iceCream.name) {
        return 1;
      }
      return 0;
    });
  });
};

export const getMenuItem = (id) => {
  return axios
    .get(`${GET_MENU}/${id}`)
    .then((response) => response.data)
    .catch((err) => {
      throw err;
    });
};

export const putMenuItem = (menuItem) => {
  return axios
    .put(`${GET_MENU}/${menuItem.id}`, menuItem)
    .then((response) => response.data)
    .catch((err) => {
      throw err;
    });
};

export const deleteMenuItem = (id) => {
  return axios.delete(`${GET_MENU}/${id}`).then((response) => {
    return response.data;
  });
};

export const getIceCreams = () => {               <-------- get ice cream call
  return axios.get(GET_ICE_CREAM).then((response) => {
    return response.data.sort((a, b) => {
      if (a.name < b.name) {
        return -1;
      }
      if (a.name > b.name) {
        return 1;
      }
      return 0;
    });
  });
};


App.js
--------
import React from "react";
import {
  BrowserRouter as Router,
  Redirect,
  Route,
  Switch,
} from "react-router-dom";
import EditIceCream from "./ice-cream/EditIcecream";
import IceCreams from "./ice-cream/IceCreams";
import Menu from "./ice-cream/Menu";
import Footer from "./structure/Footer";
import Header from "./structure/Header";
import "./styles/ice-cream.css";

function App() {
  return (
    <Router>
      <Header />
      <Switch>
        <Route path="/" component={Menu} exact />
        <Route path="/ice-creams" component={IceCreams} exact />   <---- add new route for add iceream component
        <Route path="/menu-item/:menuItemId" component={EditIceCream} exact />
        <Redirect to="/" />
      </Switch>
      <Footer />
    </Router>
  );
}

export default App;

